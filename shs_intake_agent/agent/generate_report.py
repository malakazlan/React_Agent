import os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from datetime import datetime

def generate_pdf_report(client_data: dict, filename: str = None) -> str:
    """
    Generate a PDF eligibility report and save it in the results/ directory.
    Returns the path to the saved PDF file.
    """
    # Ensure results directory exists
    results_dir = os.path.join(os.path.dirname(__file__), '..', 'results')
    os.makedirs(results_dir, exist_ok=True)

    # Default filename
    if not filename:
        client_name = client_data.get('name', 'Unknown').replace(' ', '_')
        date_str = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"eligibility_report_{client_name}_{date_str}.pdf"
    pdf_path = os.path.join(results_dir, filename)

    # Prepare report content
    c = canvas.Canvas(pdf_path, pagesize=letter)
    width, height = letter
    y = height - 50
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, y, "SHS Housing Stabilization Eligibility Report")
    y -= 30
    c.setFont("Helvetica", 10)
    c.drawString(50, y, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    y -= 30
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "Client Information:")
    y -= 20
    c.setFont("Helvetica", 11)
    c.drawString(60, y, f"Name: {client_data.get('name', 'N/A')}")
    y -= 18
    c.drawString(60, y, f"Age: {client_data.get('age', 'N/A')}")
    y -= 18
    c.drawString(60, y, f"Medicaid Status: {client_data.get('medicaid_status', 'N/A')}")
    y -= 18
    c.drawString(60, y, f"Disability Type: {client_data.get('disability_type', 'N/A')}")
    y -= 18
    c.drawString(60, y, f"Housing Status: {client_data.get('housing_status', 'N/A')}")
    y -= 30
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "Eligibility Assessment:")
    y -= 20
    c.setFont("Helvetica", 11)
    eligible = client_data.get('eligible', False)
    c.drawString(60, y, f"Eligible: {'YES' if eligible else 'NO'}")
    y -= 18
    c.drawString(60, y, f"Eligibility Score: {client_data.get('eligibility_score', 'N/A')}")
    y -= 18
    c.drawString(60, y, "Reasons:")
    y -= 16
    reasons = client_data.get('eligibility_reasons', [])
    if not reasons:
        c.drawString(70, y, "- No reasons provided.")
        y -= 16
    else:
        for reason in reasons:
            c.drawString(70, y, f"- {reason}")
            y -= 16
            if y < 80:
                c.showPage()
                y = height - 50
    y -= 10
    c.setFont("Helvetica-Oblique", 9)
    c.drawString(50, y, "This report was generated by the SHS AI Intake Agent.")
    c.save()
    return pdf_path 